Here is a solution in JavaScript that finds the most repeated item in an array and sums all of the other elements:

Copy code
function findMostRepeated(array) {
  // Initialize variables to track the most repeated item and its count
  let mostRepeated = null;
  let mostRepeatedCount = 0;

  // Initialize a variable to track the sum of the other elements
  let sum = 0;

  // Iterate through the array
  for (let i = 0; i < array.length; i++) {
    // Get the current element
    let element = array[i];

    // Count the number of times the element appears in the array
    let count = 0;
    for (let j = 0; j < array.length; j++) {
      if (array[j] === element) {
        count++;
      }
    }

    // If the element appears more times than the current most repeated element, update the most repeated item and its count
    if (count > mostRepeatedCount) {
      mostRepeated = element;
      mostRepeatedCount = count;
    }

    // If the element is not the most repeated item, add it to the sum
    if (element !== mostRepeated) {
      sum += element;
    }
  }

  return {
    mostRepeated: mostRepeated,
    mostRepeatedCount: mostRepeatedCount,
    sum: sum
  };
}

// Test the function
let arrayContainer = [3, 7, 7, 7, 2, 3, 7, 3, 7, 2, 4, 9, 3];
let result = findMostRepeated(arrayContainer);
console.log(`Total sum of not most repeated element: ${result.sum}`); // Output: "Total sum of not most repeated element: 27"
console.log(`${result.mostRepeated} is the most repeated element in ${result.mostRepeatedCount} times.`); // Output: "7 is the most repeated element in 5 times."
This solution iterates through the array and counts the number of times each element appears. It then updates the most repeated item and its count if it finds an element that appears more times than the current most repeated element. It also keeps a running sum of all elements that are not the most repeated element. Finally, it returns an object containing the most repeated element, its count, and the sum of the other elements.